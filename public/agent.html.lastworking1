<!DOCTYPE html>
<html>
<head>
    <title>Support Agent Dashboard</title>
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
            padding: 20px; 
            max-width: 1000px; 
            margin: 0 auto; 
            background: #f5f5f5;
        }
        
        .dashboard-header {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        #status { 
            padding: 15px; 
            background: #e8f5e8; 
            margin-bottom: 20px; 
            border-radius: 8px;
            border-left: 4px solid #28a745;
        }
        
        .status-offline { 
            background: #f8d7da !important; 
            border-left-color: #dc3545 !important; 
        }
        
        #notification {
            display: none;
            padding: 15px;
            background: #fff3cd;
            margin-bottom: 20px;
            border-left: 4px solid #ffc107;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .chat-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        #agent-messages { 
            height: 400px; 
            overflow-y: auto; 
            padding: 20px; 
            background: #fafafa;
        }
        
        .customer-msg { 
            color: #d63384; 
            margin: 8px 0; 
            padding: 8px 12px;
            background: white;
            border-radius: 8px;
            border-left: 3px solid #d63384;
        }
        
        .agent-msg { 
            color: #0d6efd; 
            margin: 8px 0; 
            padding: 8px 12px;
            background: #e3f2fd;
            border-radius: 8px;
            border-left: 3px solid #0d6efd;
        }
        
        .system-msg { 
            color: #20c997; 
            margin: 8px 0; 
            padding: 8px 12px;
            background: #d1ecf1;
            border-radius: 8px;
            font-style: italic;
        }
        
        .bot-msg {
            color: #6c757d;
            margin: 8px 0;
            padding: 8px 12px;
            background: #f8f9fa;
            border-radius: 8px;
            border-left: 3px solid #6c757d;
        }
        
        .input-container {
            padding: 20px;
            background: white;
            border-top: 1px solid #eee;
            display: flex;
            gap: 10px;
            align-items: center;
        }
        
        #agent-input { 
            flex: 1;
            padding: 12px; 
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
        }
        
        #agent-input:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0,123,255,.25);
        }
        
        button { 
            padding: 12px 20px; 
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s;
        }
        
        #send-btn {
            background: #007bff;
            color: white;
        }
        
        #send-btn:hover:not(:disabled) {
            background: #0056b3;
        }
        
        #end-chat-btn {
            background: #dc3545;
            color: white;
        }
        
        #end-chat-btn:hover:not(:disabled) {
            background: #c82333;
        }
        
        #accept-btn {
            background: #28a745;
            color: white;
            font-weight: bold;
        }
        
        #accept-btn:hover {
            background: #218838;
        }
        
        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .stats {
            display: flex;
            gap: 20px;
            margin-top: 10px;
        }
        
        .stat-item {
            background: #f8f9fa;
            padding: 10px 15px;
            border-radius: 6px;
            text-align: center;
            min-width: 80px;
        }
        
        .stat-number {
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
        }
        
        .stat-label {
            font-size: 12px;
            color: #6c757d;
            margin-top: 4px;
        }
        
        #debug {
            margin-top: 20px;
            padding: 15px;
            background: white;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 11px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            max-height: 200px;
            overflow-y: auto;
        }
        
        .debug-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        #clear-debug {
            background: #6c757d;
            color: white;
            padding: 4px 8px;
            font-size: 10px;
        }
        
        .connection-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 8px;
        }
        
        .connected { background: #28a745; }
        .disconnected { background: #dc3545; }
        .connecting { 
            background: #ffc107; 
            animation: pulse 1.5s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.3; }
        }
    </style>
</head>
<body>
    <div class="dashboard-header">
        <h1>🎧 Live Support Dashboard</h1>
        <div id="status">
            <span class="connection-indicator connecting"></span>
            Connecting to server...
        </div>
        <div class="stats">
            <div class="stat-item">
                <div class="stat-number" id="queue-count">0</div>
                <div class="stat-label">In Queue</div>
            </div>
            <div class="stat-item">
                <div class="stat-number" id="active-chats">0</div>
                <div class="stat-label">Active Chats</div>
            </div>
            <div class="stat-item">
                <div class="stat-number" id="total-agents">0</div>
                <div class="stat-label">Total Agents</div>
            </div>
        </div>
    </div>

    <div id="notification">
        <strong id="notification-text"></strong>
        <button id="accept-btn">Accept Chat</button>
    </div>

    <div class="chat-container">
        <div id="agent-messages"></div>
        <div class="input-container">
            <input id="agent-input" placeholder="Type your response..." disabled>
            <button id="send-btn" disabled>Send Message</button>
            <button id="end-chat-btn" disabled>End Chat</button>
        </div>
    </div>

    <div id="debug">
        <div class="debug-header">
            <h3 style="margin: 0;">Debug Console</h3>
            <button id="clear-debug">Clear</button>
        </div>
        <div id="debug-log"></div>
    </div>

    <script>
        let debugCount = 0;
        const MAX_DEBUG_ENTRIES = 50;
        
        const debugLog = (message, type = 'info') => {
            const logDiv = document.getElementById('debug-log');
            const timestamp = new Date().toLocaleTimeString();
            const color = type === 'error' ? '#dc3545' : type === 'success' ? '#28a745' : '#6c757d';
            
            debugCount++;
            logDiv.innerHTML += `<div style="color: ${color}; margin: 2px 0;">[${timestamp}] ${message}</div>`;
            
            // Keep only last 50 entries
            if (debugCount > MAX_DEBUG_ENTRIES) {
                const entries = logDiv.children;
                if (entries.length > 0) {
                    entries[0].remove();
                }
            }
            
            logDiv.scrollTop = logDiv.scrollHeight;
            console.log(`[${timestamp}] ${message}`);
        };

        let ws;
        let currentSession = null;
        let connectionStatus = 'disconnected';
        const agentId = `agent_${Math.random().toString(36).substr(2, 6)}`;

        function updateConnectionStatus(status, message) {
            connectionStatus = status;
            const statusDiv = document.getElementById('status');
            const indicator = statusDiv.querySelector('.connection-indicator');
            
            indicator.className = `connection-indicator ${status}`;
            statusDiv.innerHTML = `<span class="connection-indicator ${status}"></span>${message}`;
            
            if (status === 'disconnected') {
                statusDiv.classList.add('status-offline');
            } else {
                statusDiv.classList.remove('status-offline');
            }
        }

        function connectWebSocket() {
            updateConnectionStatus('connecting', 'Connecting to server...');
            debugLog('Attempting WebSocket connection...', 'info');
            
            ws = new WebSocket(`ws://${window.location.host}`);

            ws.onopen = () => {
                debugLog('WebSocket connected successfully', 'success');
                
                let secretKey = localStorage.getItem('agentSecret');
                if (!secretKey) {
                    secretKey = prompt('Enter agent secret key:');
                    if (secretKey) {
                        localStorage.setItem('agentSecret', secretKey);
                    }
                }
                
                if (!secretKey) {
                    debugLog('No secret key provided, closing connection', 'error');
                    ws.close();
                    return;
                }
                
                ws.send(JSON.stringify({
                    type: 'agent_join',
                    agentId: agentId,
                    secretKey: secretKey
                }));
            };

            ws.onmessage = (e) => {
                debugLog(`Received: ${e.data}`, 'info');
                try {
                    const data = JSON.parse(e.data);
                    handleMessage(data);
                } catch (error) {
                    debugLog(`Error parsing message: ${error.message}`, 'error');
                }
            };

            ws.onclose = (e) => {
                updateConnectionStatus('disconnected', 'Connection lost - attempting to reconnect...');
                debugLog(`WebSocket closed: ${e.code} ${e.reason}`, 'error');
                
                // Clear stored secret if unauthorized
                if (e.code === 1000) {
                    localStorage.removeItem('agentSecret');
                }
                
                setTimeout(connectWebSocket, 3000);
            };

            ws.onerror = (err) => {
                debugLog(`WebSocket error: ${err.message || 'Unknown error'}`, 'error');
            };
        }

        // Store pending requests to manage state
        let pendingRequests = new Map(); // sessionId -> request data
        let acceptedChats = new Map(); // sessionId -> agent data

        function handleMessage(data) {
            switch(data.type) {
                case 'agent_status':
                    updateConnectionStatus('connected', data.message);
                    updateStats({ 
                        waitingCustomers: data.waitingCustomers || 0,
                        totalAgents: data.totalAgents || 1
                    });
                    break;

                case 'pending_request':
                    showNotification(data);
                    pendingRequests.set(data.sessionId, data);
                    updateStats({ 
                        queueCount: data.totalInQueue || data.position,
                        waitingCustomers: data.totalInQueue || data.position
                    });
                    break;

                case 'customer_assigned':
                    acceptRequest(data);
                    break;

                case 'customer_message':
                    addMessage(`Customer: ${data.message}`, 'customer-msg');
                    break;

                case 'request_taken':
                    handleRequestTaken(data);
                    break;

                case 'request_already_taken':
                    handleRequestAlreadyTaken(data);
                    break;

                case 'agent_joined':
                    debugLog(`Agent ${data.agentId} joined. Total agents: ${data.totalAgents}`, 'success');
                    updateStats({ totalAgents: data.totalAgents });
                    break;

                case 'chat_ended':
                    debugLog(`Chat ${data.sessionId} ended by ${data.endedBy}`, 'info');
                    updateStats({ totalQueue: data.totalQueue });
                    break;

                default:
                    debugLog(`Unhandled message type: ${data.type}`, 'info');
            }
        }

        function handleRequestTaken(data) {
            // Remove from our pending requests
            pendingRequests.delete(data.sessionId);
            
            // Update notification if this was the current session
            if (currentSession === data.sessionId) {
                const notificationDiv = document.getElementById('notification');
                const notificationText = document.getElementById('notification-text');
                const acceptBtn = document.getElementById('accept-btn');
                
                notificationText.innerHTML = `⚠️ This request was accepted by <strong>${data.takenBy}</strong>`;
                acceptBtn.style.display = 'none';
                
                // Auto-hide after 3 seconds
                setTimeout(() => {
                    notificationDiv.style.display = 'none';
                    acceptBtn.style.display = 'inline-block';
                    currentSession = null;
                }, 3000);
            }
            
            updateStats({ queueCount: data.remainingQueue });
            debugLog(`Request ${data.sessionId} was accepted by ${data.takenBy}. Queue: ${data.remainingQueue}`, 'info');
        }

        function handleRequestAlreadyTaken(data) {
            debugLog(`Attempted to accept already taken request: ${data.sessionId}`, 'error');
            
            // Show temporary error message
            const notificationDiv = document.getElementById('notification');
            const notificationText = document.getElementById('notification-text');
            const acceptBtn = document.getElementById('accept-btn');
            
            notificationText.innerHTML = `❌ ${data.message}`;
            acceptBtn.style.display = 'none';
            
            setTimeout(() => {
                notificationDiv.style.display = 'none';
                acceptBtn.style.display = 'inline-block';
                currentSession = null;
            }, 3000);
        }

        function showNotification(data) {
            // Don't show if already accepted by someone else
            if (acceptedChats.has(data.sessionId)) {
                return;
            }
            
            document.getElementById('notification').style.display = 'block';
            const notificationText = document.getElementById('notification-text');
            const acceptBtn = document.getElementById('accept-btn');
            
            notificationText.innerHTML = `
                📞 <strong>New Request #${data.position}</strong> of ${data.totalInQueue || data.position}<br>
                💬 "${data.lastMessage}"
            `;
            
            acceptBtn.style.display = 'inline-block';
            acceptBtn.disabled = false;
            currentSession = data.sessionId;
            
            debugLog(`New customer request: ${data.sessionId} (${data.position}/${data.totalInQueue})`, 'success');
        }

        function acceptRequest(data) {
            currentSession = data.sessionId;
            acceptedChats.set(data.sessionId, { agentId, timestamp: Date.now() });
            
            document.getElementById('agent-input').disabled = false;
            document.getElementById('send-btn').disabled = false;
            document.getElementById('end-chat-btn').disabled = false;
            document.getElementById('notification').style.display = 'none';

            const messagesDiv = document.getElementById('agent-messages');
            messagesDiv.innerHTML = `
                <div class="system-msg">✅ Chat started with customer (Session: ${data.sessionId})</div>
                <div class="system-msg">📜 Previous conversation history:</div>
            `;

            data.history.forEach(msg => {
                const className = msg.role === 'user' ? 'customer-msg' : 'bot-msg';
                addMessage(`${msg.role}: ${msg.content}`, className);
            });

            // Add separator
            addMessage('--- Live conversation starts here ---', 'system-msg');

            debugLog(`Accepted chat for session: ${data.sessionId}`, 'success');
            updateStats({ activeChats: 1, queueCount: data.queuePosition || 0 });
        }

        function addMessage(message, className) {
            const messagesDiv = document.getElementById('agent-messages');
            const msgDiv = document.createElement('div');
            msgDiv.className = className;
            msgDiv.textContent = message;
            messagesDiv.appendChild(msgDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        function updateStats(stats) {
            if (stats.queueCount !== undefined) {
                document.getElementById('queue-count').textContent = stats.queueCount;
            }
            if (stats.activeChats !== undefined) {
                document.getElementById('active-chats').textContent = stats.activeChats;
            }
            if (stats.waitingCustomers !== undefined) {
                document.getElementById('queue-count').textContent = stats.waitingCustomers;
            }
            if (stats.totalAgents !== undefined) {
                document.getElementById('total-agents').textContent = stats.totalAgents;
            }
            if (stats.totalQueue !== undefined) {
                document.getElementById('queue-count').textContent = stats.totalQueue;
            }
        }

        // Event listeners
        document.getElementById('accept-btn').addEventListener('click', () => {
            if (!currentSession) return;
            ws.send(JSON.stringify({
                type: 'accept_request',
                sessionId: currentSession,
                agentId: agentId
            }));
            debugLog(`Accepting request for session: ${currentSession}`, 'info');
        });

        document.getElementById('send-btn').addEventListener('click', sendMessage);
        document.getElementById('agent-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage();
        });

        document.getElementById('end-chat-btn').addEventListener('click', () => {
            if (!currentSession) return;
            
            ws.send(JSON.stringify({
                type: 'end_chat',
                sessionId: currentSession
            }));
            
            // Clean up local state
            acceptedChats.delete(currentSession);
            currentSession = null;
            
            document.getElementById('agent-input').disabled = true;
            document.getElementById('send-btn').disabled = true;
            document.getElementById('end-chat-btn').disabled = true;
            
            // Clear chat area
            document.getElementById('agent-messages').innerHTML = 
                '<div class="system-msg">💤 No active chat. Waiting for customers...</div>';
            
            debugLog('Chat ended by agent', 'info');
            updateStats({ activeChats: 0 });
        });

        document.getElementById('clear-debug').addEventListener('click', () => {
            document.getElementById('debug-log').innerHTML = '';
            debugCount = 0;
        });

        function sendMessage() {
            const input = document.getElementById('agent-input');
            const message = input.value.trim();
            if (!message || !currentSession) return;

            ws.send(JSON.stringify({
                type: 'agent_message',
                sessionId: currentSession,
                message: message
            }));

            addMessage(`You: ${message}`, 'agent-msg');
            input.value = '';
            debugLog(`Sent message: ${message}`, 'info');
        }

        // Initialize
        connectWebSocket();
    </script>
</body>
</html>
